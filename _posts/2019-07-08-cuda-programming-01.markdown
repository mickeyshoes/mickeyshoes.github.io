---
layout: post
title:  "CUDA Programming 시도 (1)"
date:   2019-07-08 17:30:00
last_modified_at:  2019-07-08 17:41:00
excerpt: ""
categories: lab
tags:  Jetson Nano, CUDA
image:
  feature: mickey-riding.jpg
  topPosition: 0px
bgContrast: dark
bgGradientOpacity: darker
syntaxHighlighter: no
---
우리는 그간 Jetson nano와 친해지려고 많은 노력을 해왔다.

그렇다면 우리는 이제 무엇을 해야할까?

친구와 호구조사가 끝났다면, 이제 다른점들이 궁금 할 것이다.

어떤걸 좋아하는지, 어떤 수업을 듣는지 등등 일상적인 대화도 좋고 놀러가자고 권유를 하는 말도 좋다!

그렇다. 이제는 **대화** 를 할 시간이다.

Jetson과 어떻게 대화를 나눌 수 있을까? 우리가 아는 것을 중점으로 대화를 풀어나가보자.

우리가 아는 이 녀석은 갤럭시 노트5정도의 성능의 CPU와 **CUDA core** 를 128개나 가지고 있다는 것을 안다.

갤럭시 노트 9까지 나온 시점에서 CPU에 관심을 가져주기엔 늦은 감이 없지 않아 있으니, 대화주제를 CUDA로 해보자.

다른녀석들과는 다르게 Jetson은 CUDA로 대화를 할 줄 아는 멋진 녀석이다.

하지만, 우리는 CUDA를 처음 접한다. 할 줄 모르는 것이다.

Jetson과 심도있는 대화를 나누기 위해 CUDA를 조금씩 접해보자.

기본적으로 CUDA Programming은 c계열 언어와 비슷하다.

c언어로 안녕? 이라는 말을 하고 싶을때 어떻게 하는가?


<blockquote class="u--startsWithDoubleQuote">#include &#60;stdio.h&#62; <br><br>

void main(){

  printf("안녕?");

}
</blockquote>

 -이렇게 인사를 건낼 수 있다.

그러나 CUDA를 사용하여 인사를 하는 방법은 조금 남다르다.

CUDA를 사용한다는 것은, 곧 그래픽카드에 접근하여 일을 처리해달라! 라고 하는 것이기 때문에 무턱대고 "인사해라" 라고 하는 것은 미국에서 "안녕!" 이라고 인사하는 것과 같다.

맞다. 혼자만 알아 먹을 말이라는 이야기이다.

그렇다면 어떻게 해야 그래픽카드에 접근하여 인사를 받아 낼 수 있을까?

어렵게 인사를 받아 낼 수록 기억에 오래 남을 것이다.

CUDA식 인사를 살펴보자.

<blockquote class="u--startsWithDoubleQuote">#include &#60;stdio.h&#62; <br><br>

__&#95;&#95;global____ void kernel(){

}<br>

int main(void){<br>

  __kernel&#60;&#60;&#60;1,1&#62;&#62;&#62;()__<br><br>
  printf("안녕?");<br><br>
  return 0;

}
</blockquote>

뭔가 다른 점이 느껴지는가?

안느껴지면 이상한것이다. 대놓고 키워드가 더 추가 되었다.

그렇다는 말은 외울게 생겼다는 말이 된다.

........................아무튼 그럼 저 키워드들이 어떤 역할을 하는지 알아보자.

함수 선언 앞에 붙은 **&#95;&#95;global__** 은 이 키워드가 붙은 함수는 커널함수 라는 것을 컴파일러에게 일러주는 것이다.

그렇다면 커널은 무엇인고? 운영체제 시간에 들은 듯 한 기분이 든다.

여기서의 커널은 디바이스에서 실행되는 것. 즉, **&#95;&#95;global__** 이 붙은 함수는 GPU에서 작업을 하겠다 라는 의미가 되는 것이다.

**&#95;&#95;global__** 이 붙어있어도 기본적으로 함수는 함수다.

함수를 처리하려면 그렇지 않은 경우도 있지만, 일반적으로 매개변수를 입력받아서 처리를 하는 과정이 생각날 것이다.

CUDA를 사용하여 Programming하는 것도 다를 것이 없다.

선언한 함수에 변수 타입을 지정해 주고, 그에 맞는 변수는 ()안에 작성하면 된다.

그렇다면 **&#60;&#60;&#60;1,1&#62;&#62;&#62;** 은 무슨 의미일까?

&#60;&#60;&#60;&#62;&#62;&#62; 안에 들어가는 숫자들은 커널의 실행 방식을 결정하는 런타임 매개 변수이다.

간단히 말하자면, &#60;&#60;&#60;parallel block의 갯수, block당 thread의 갯수&#62;&#62;&#62; 라고 생각하면 되겠다.

이렇게만 들으면 잘 모르겠다. 비유를 해서 생각해보자.

_[어떤 고객이 제품을 1000개를 만들어 달라고 가게에 요청을 했다._

_나는 굉장히 기쁘다._

_"1000개나 팔면 돈이 얼마야! 벌써부터 돈방석에 앉은 기분이 드는걸?"_

_그러나 갑자기 고민이 된다. 1000개나 되는 양을 어떻게 만들 것인가..._

_여러 곳에서 받기는 귀찮지만 여러 공장에 일을 나누어 줄 것인가?_

_아니면 평소에 맡기던 박사장네 공장에 부탁을 할 것인가.._

_그런데 박사장네에 부탁을 하자니 이번에 경기가 안좋아서 직원 수를 감축시켰다고 했는데 그러면 마감시간에 맞추기 어려워진다._

_옆동네 조사장네는 직원도 많고 공장도 많은데.. 어쩐담..]_

여기서 공장의 갯수가 parallel block의 갯수이다.

한 공장에서 근무하는 직원의 수는 block당 thread의 갯수를 생각하면 된다.

이렇게만 알려주면 되는데 왜 굳이 이렇게 장황하게 비유를 들었는지 궁금해 할 것이다.

..........

언젠가 해야 할 지도 모르는 고민을 미리 했다고 생각하자.

기본적인 구성을 알아보았으니 메모리 할당에 대한 내용은 다음 포스팅에서 설명하겠다.

한번에 많이 배우면 머리만 아프다.
